name: Workflow treinamento Areopagus

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PORT: 3333
  APP_NAME: adonis-app
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/thiagotfsilva/adonis-app:latest
  TZ: ${{ secrets.TZ }}
  HOST: ${{ secrets.HOST }}
  LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
  APP_KEY: ${{ secrets.APP_KEY }}
  NODE_ENV: ${{ secrets.NODE_ENV }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_DATABASE: ${{ secrets.DB_DATABASE }}
  SMTP_HOST: ${{ secrets.SMTP_HOST }}
  SMTP_PORT: ${{ secrets.SMTP_PORT }}

jobs:
  tests_and_migrations:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Database
        run: docker compose up -d --build

      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}

        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Installing Dependencies
        run: npm install

      - run: npm run test
      - run: npm run migration

  build_and_publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Github Registry
        if: success()
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image api
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Publish image api
        run: docker push ${{ env.IMAGE_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_publish
    steps:
      - name: EC2 Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            sudo docker container stop ${{ env.APP_NAME }} || true
            sudo docker container rm ${{ env.APP_NAME }} || true
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            sudo docker pull ${{ env.IMAGE_NAME }}
            sudo docker run -d \
              --restart=unless-stopped \
              -p ${{ env.PORT }}:${{ env.PORT }} \
              --name ${{ env.APP_NAME }} \
              -e TZ="${{ secrets.TZ }}" \
              -e PORT="${{ secrets.PORT }}" \
              -e HOST="${{ secrets.HOST }}" \
              -e LOG_LEVEL="${{ secrets.LOG_LEVEL }}" \
              -e APP_KEY="${{ secrets.APP_KEY }}" \
              -e NODE_ENV="${{ secrets.NODE_ENV }}" \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_PORT="${{ secrets.DB_PORT }}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_DATABASE="${{ secrets.DB_DATABASE }}" \
              -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
              -e SES_REGION="${{ secrets.SES_REGION }}" \
              -e S3_REGION="${{ secrets.S3_REGION }}" \
              -e S3_BUCKET="${{ secrets.S3_BUCKET }}" \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e SMTP_HOST="${{ secrets.SMTP_HOST }}" \
              -e SMTP_PORT="${{ secrets.PORT }}" \
              ${{ env.IMAGE_NAME }}
